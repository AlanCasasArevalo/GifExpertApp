{"version":3,"sources":["components/CategoryAdd.js","helpers/get-gifs.js","components/GridItem.js","components/GifGrid.js","hoooks/useFetchGifs.js","components/GifExpertApp.js","index.js"],"names":["CategoryAdd","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","categories","type","value","onChange","target","getGifs","category","a","urlToCall","encodeURI","fetch","resp","json","data","gifs","map","image","id","title","url","images","downsized_medium","GridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","useFetchGifs","GifExpertApp","divRoot","document","querySelector","ReactDOM","render"],"mappings":"2MAkCeA,EA/BK,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAAmB,EAEDC,mBAAS,IAFR,mBAE9BC,EAF8B,KAElBC,EAFkB,KAgBrC,OACI,sBAAMC,SATW,SAACC,GAClBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,IAC3BR,GAAc,SAAAS,GAAU,OAAKP,GAAL,mBAAoBO,OAC5CN,EAAc,MAKlB,SACI,uBACIO,KAAK,OACLC,MAAOT,EACPU,SAjBmB,SAACP,GAC5BF,EAAcE,EAAEQ,OAAOF,a,+BCRlBG,EAAO,uCAAG,WAAQC,GAAR,uBAAAC,EAAA,4DACJ,mCACTC,EAFa,iDAE0CC,UAAUH,GAFpD,6BACJ,oCADI,SAGAI,MAAMF,GAHN,cAGbG,EAHa,gBAIEA,EAAKC,OAJP,uBAIZC,EAJY,EAIZA,KAEDC,EAAOD,EAAKE,KAAI,SAAAC,GAAU,IAAD,EAC3B,MAAO,CACHC,GAAID,EAAMC,GACVC,MAAOF,EAAME,MACbC,IAAG,UAAEH,EAAMI,cAAR,aAAE,EAAcC,iBAAiBF,QAVzB,kBAcZL,GAdY,4CAAH,sDCeLQ,EAZE,SAAC,GAAqB,EAApBL,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOC,EAAS,EAATA,IAG1B,OACI,sBAAKI,UAAU,wCAAf,UACI,qBAAKC,IAAKL,EAAKM,IAAKP,IAEpB,4BAAIA,QC0BDQ,EA/BC,SAAC,GAAgB,IAAfpB,EAAc,EAAdA,SAAc,ECFJ,SAAEA,GAAe,IAAD,EACdd,mBAAS,CAC/BqB,KAAM,GACNc,SAAS,IAH2B,mBACjCC,EADiC,KAC1BC,EAD0B,KAuBxC,OAhBAC,qBAAU,WACNzB,EAASC,GACJyB,MAAK,SAAAX,GAAM,OAAIS,EAAS,CACrBhB,KAAMO,EACNO,SAAS,SAElB,CAACrB,IAUGsB,EDnByBI,CAAa1B,GAAhCc,EAFe,EAErBP,KAAcc,EAFO,EAEPA,QAErB,OACI,qCACI,oBAAIJ,UAAU,mCAAd,SAAkDjB,IAEjDqB,GAAW,gDAEZ,qBAAKJ,UAAU,YAAf,SAEQH,EAAOL,KAAI,SAACC,GAAD,OAEH,cAAC,EAAD,eAEQA,GADCA,EAAMC,aEe5BgB,EA/BM,WAAO,IAAD,EAEazC,mBAAS,CAAC,WAFvB,mBAEhBQ,EAFgB,KAEJT,EAFI,KAIvB,OACI,qCACI,8CACA,cAAC,EAAD,CACIA,cAAeA,IAEnB,uBAEA,6BAEQS,EAAWe,KAAI,SAAAT,GAAQ,OAClB,cAAC,EAAD,CAEOA,SAAUA,GADLA,YCX/B4B,EAAUC,SAASC,cAAc,QAEvCC,IAASC,OAAQ,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.6d12266d.chunk.js","sourcesContent":["import React, {useState} from 'react'\nimport PropTypes from 'prop-types'\n\nconst CategoryAdd = ({setCategories}) => {\n\n    const [inputValue, setInputValue] = useState('')\n\n    const handleInputValueChange = (e) => {\n        setInputValue(e.target.value)\n    }\n\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        if (inputValue.trim().length > 2) {\n            setCategories(categories => [inputValue, ...categories])\n            setInputValue('')\n        }\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input\n                type=\"text\"\n                value={inputValue}\n                onChange={handleInputValueChange}\n            />\n        </form>\n    )\n}\n\nCategoryAdd.propTypes = {\n    setCategories: PropTypes.func.isRequired\n}\n\nexport default CategoryAdd;\n\n","export const getGifs = async ( category ) => {\n    const apiKey = 'irpbY8APMlGjv0zXNFjdWqDFsvoCiruB';\n    const urlToCall = `https://api.giphy.com/v1/gifs/search?q=${ encodeURI(category) }&limit=10&api_key=${apiKey}`\n    const resp = await fetch(urlToCall);\n    const {data} = await resp.json();\n\n    const gifs = data.map(image => {\n        return {\n            id: image.id,\n            title: image.title,\n            url: image.images?.downsized_medium.url\n        }\n    })\n\n    return gifs\n}","import React from 'react'\n\n// const GridItem = ({category}) => {\nconst GridItem = ({id, title, url}) => {\n\n    // Animation came from https://animate.style/\n    return (\n        <div className=\"card animate__animated animate__flash\">\n            <img src={url} alt={title}\n            />\n            <p>{title}</p>\n        </div>\n    )\n}\n\nexport default GridItem;\n","import React from 'react'\nimport PropTypes from 'prop-types'\nimport {useFetchGifs} from \"../hoooks/useFetchGifs\";\nimport GridItem from \"./GridItem\";\n\nconst GifGrid = ({category}) => {\n\n    const {data: images, loading} = useFetchGifs(category)\n\n    return (\n        <>\n            <h3 className=\"animate__animated animate__flash\">{category}</h3>\n\n            {loading && <p>'Cargando ....'</p>}\n\n            <div className=\"card-grid\">\n                {\n                    images.map((image) =>\n                        (\n                            <GridItem\n                                key={image.id}\n                                {...image}\n                            />\n                        )\n                    )\n                }\n            </div>\n        </>\n    )\n}\n\n\nGifGrid.propTypes = {\n    category: PropTypes.string.isRequired\n}\n\nexport default GifGrid;\n","import {useState, useEffect} from \"react\";\nimport {getGifs} from \"../helpers/get-gifs\";\n\nexport const useFetchGifs = ( category ) => {\n    const [state, setState] = useState({\n        data: [],\n        loading: true\n    })\n\n    // Esto sirve para poder llamar a la funcion de obtener los gifs pero solo la primera vez que se ejecuta el componente\n    useEffect(() => {\n        getGifs( category )\n            .then(images => setState({\n                data: images,\n                loading: false\n            }))\n    }, [category])\n\n    // // Mas o menos es lo mismo que lo que hemos echo con las imagenes\n    // setTimeout(() => {\n    //     setState({\n    //         data: [1,2,3,4,5,6,7,8,9,90],\n    //         loading: false\n    //     })\n    // }, 2500)\n\n    return state\n}","import React, {useState} from 'react'\nimport CategoryAdd from \"./CategoryAdd\";\nimport GifGrid from \"./GifGrid\";\n\nconst GifExpertApp = () => {\n\n    const [categories, setCategories] = useState(['Dragon'])\n\n    return (\n        <>\n            <h1>GifExpertApp</h1>\n            <CategoryAdd\n                setCategories={setCategories}\n            />\n            <hr/>\n\n            <ol>\n                {\n                    categories.map(category =>\n                        (<GifGrid\n                                key={category}\n                                category={category}\n                            />\n                        ))\n                }\n            </ol>\n\n        </>\n    )\n}\n//\n// GifExpertApp.propTypes = {\n//     value: PropTypes.number\n// }\n\nexport default GifExpertApp;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport GifExpertApp from \"./components/GifExpertApp\";\n\n// ReactDOM.render(\n//     <GifExpertApp />\n// // document.getElementById('root')\n// )\nconst divRoot = document.querySelector('#app');\n\nReactDOM.render( <GifExpertApp />, divRoot );\n"],"sourceRoot":""}